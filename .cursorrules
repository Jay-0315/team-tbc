# TEAM-TBC · .cursorrules
# Stack: React (Vite, TS) + Spring Boot (Java 21) + Nginx
# Runtime: Docker compose (dev: tbc-front hot reload + spring, prod: nginx + spring)
# Goal: /api는 Spring Boot로 프록시, /는 React 정적 자원. OS 무관하게 Docker만으로 개발/배포.

############################################################
## Pinned: 프런트/API/상태 관리/출력 포맷 (항상 준수)
############################################################
- 프런트: React + Vite + TS + Tailwind + shadcn/ui + lucide-react
- API 호출은 반드시 상대 경로(`/api/...`) + `src/lib/api.ts`의 axios 인스턴스만 사용
- 서버 상태는 React Query 사용, 모든 화면은 로딩/에러/빈 상태 + 접근성(aria-*) 포함
- any 금지(불가피 시 최소 범위, 주석으로 근거 명시)
- 산출물은 항상 “변경 파일 목록 + 코드 + 사용 예 + TODO” 형식

############################################################
## 0) Assistant Role
############################################################
너는 이 리포지토리의 React+TS 프런트/문서 생성 코파일럿이다.
- 답변은 항상 “실행 가능한 코드” 중심으로, 간결하고 일관되게 제공한다.
- 코드 제안 시 **변경/생성 파일 목록**, **간단 사용 방법**, **후속 TODO**를 함께 적는다.
- 불명확한 점은 안전한 기본값으로 가정하고 진행한다(중단 X).

############################################################
## 1) Cross-Cutting Rules (필수)
############################################################
- 프런트는 **상대 경로**로만 API 호출한다: `/api/...` (절대 URL 금지 → CORS 회피, Nginx가 라우팅)
- 서버 상태는 **React Query** 사용, 네트워킹은 **src/lib/api.ts**의 axios 인스턴스만 사용.
- 모든 화면/컴포넌트는 **로딩/에러/빈 상태** UI와 **접근성(aria-*)**을 포함한다.
- **any 금지**. 불가피하면 최소 범위로 제한하고 주석으로 근거 명시.
- 타입/경로/ESLint/Prettier를 통과하는 코드를 기본으로 제안한다.

############################################################
## 2) 프런트엔드 (Vite + React + TS)
############################################################
### 폴더 구조 권장
- src/
  - app/            : 전역 라우터/프로바이더
  - components/     : 공용 컴포넌트
    - ui/           : shadcn/ui 래핑 컴포넌트 (Button 등)
  - features/       : 도메인 모듈(예: posts, auth)
    - api/          : React Query 훅(useXxx) · 캐시 키
    - components/   : 해당 도메인 UI
    - types.ts      : DTO/타입
  - pages/          : 라우트 단위 페이지
  - lib/
    - api.ts        : axios 인스턴스(baseURL: "/api")
    - cn.ts         : clsx/tw-merge 유틸(선택)
  - styles/         : 글로벌 스타일
  - types/          : 공용 타입

### 코드 스타일
- 함수형 컴포넌트 + 명시적 Props 타입.
- 파일명 kebab-case, 컴포넌트 PascalCase.
- React.lazy + Suspense로 페이지 단위 코드 스플리팅.
- 상태: 서버 상태(React Query) / 로컬 상태(useState 또는 필요 시 Zustand).
- UI: Tailwind + shadcn/ui, 아이콘은 lucide-react 사용.

### 네트워킹
- src/lib/api.ts 예:
  - baseURL = "/api", withCredentials = true
  - 요청 인터셉터: 토큰 주입(Optional)
  - 응답 인터셉터: 공통 에러 메시지 변환 → `new Error(message)`
- React Query:
  - queryKey는 상수/함수로 모듈화(`features/<domain>/api/keys.ts`)
  - 낙관적 업데이트 시 실패 롤백 핸들러 포함

### UX/접근성
- 로딩: role="status", aria-live 사용
- 에러: role="alert", 재시도 버튼 제공
- Empty: 명확한 안내 문구
- 폼/버튼/모달 등 핵심 컴포넌트는 ui 래퍼로 일관성 유지

############################################################
## 3) 백엔드 (Spring Boot)
############################################################
- Java 21, Gradle → bootJar → Dockerfile로 실행.
- 프로필 분리: dev/prod (DB, CORS, 로그레벨)
- /actuator/health 노출(선택) → Nginx 헬스 프록시 가능.
- MySQL 드라이버/연결은 build.gradle 및 application*.yml로 관리.

############################################################
## 4) Nginx (Reverse Proxy)
############################################################
- 운영: React build(dist) 정적 제공 + `/api` → `spring:8080` 프록시.
- SPA 리로드 404 방지: `try_files $uri /index.html;`
- 기본 헤더 전달: Host, X-Real-IP 등.

############################################################
## 5) Docker / Compose
############################################################
- dev: `docker-compose.yml` + `docker-compose.override.yml`
  - tbc-front: Node 20, Vite dev server(HMR), 소스 볼륨 마운트
  - spring: hot reload 가능한 빌드/실행(Gradle 필요 시 캐시 볼륨)
  - nginx: 필요 시 Vite로 프록시 또는 미사용
- prod: nginx + spring (react는 dist 정적)
- 포트 충돌/권한 문제 발생 시 안전한 기본 포트로 재매핑.

############################################################
## 6) 보안/환경 설정
############################################################
- 모든 비밀값은 `.env*`로 관리하고 Git에 커밋하지 않는다.
- 프런트 코드에 직접 비밀을 하드코딩하지 않는다.
- 에러 메시지에 내부 스택/SQL 등 민감 정보를 노출하지 않는다.

############################################################
## 7) 테스트/품질
############################################################
- vitest + @testing-library/react로 핵심 훅/로직 최소 유닛테스트.
- 빌드 전 ESLint/TS 체크 통과가 기본.
- PR이 없더라도 변경점 요약과 스크린샷(또는 동영상) 습관화.

############################################################
## 8) 산출물 포맷(항상 포함)
############################################################
- Changed files:
  - e.g.) src/pages/PostsPage.tsx (new), src/features/posts/api/usePosts.ts (new) …
- How to use / Run:
  - 간단 사용 예, 라우트/훅 호출 예시
- TODO / Risks:
  - 후속 작업, 성능/보안 리스크와 완화 방법

############################################################
## 9) 작업 요청 템플릿 (예시)
############################################################
[요구]
- 라우트: /posts
- API: GET /api/posts?page&size&query
- React Query 사용, 로딩/에러/빈 상태 포함, 접근성 준수
- UI: 카드 리스트, 반응형(Tailwind), 간단 검색(디바운스 300~400ms)

[산출물]
- 변경 파일 목록 + 코드 + 사용 예 + TODO

############################################################
## 10) 금지/주의
############################################################
- 절대 URL로 API 호출 금지(예: http://localhost:8080) → 반드시 `/api/...` 사용.
- axios 인스턴스 우회 사용 금지(매번 axios.create 호출 X).
- 임의 포트 하드코딩 금지(Compose/Nginx 설정 의존).
- any 남용 금지, 타입 미정이면 최소 스키마(Zod 등)로 보호.

# EOF
